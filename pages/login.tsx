import { useContext } from 'react';
import styles from "../styles/Pages/Login.module.scss";

import { AuthContext } from '../context/AuthContext';
import { useForm } from 'react-hook-form';
import Head from 'next/head';
import toast, { Toaster } from 'react-hot-toast';
import { faArrowRightToBracket } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { useSpring, animated } from 'react-spring';


type FormData = {
    email: string;
    password: string;
};

const Login = () => {

    const { loginUser, loggingIn } = useContext(AuthContext);

    const { register, handleSubmit, formState: { errors } } = useForm<FormData>();

    const onLoginUser = async ({ email, password }: FormData) => {
        try {
            await loginUser(email, password);
        } catch (error: any) {
            toast.error(error?.response?.data?.message)
        }
    }

    const gradientProps = useSpring({
        from: {
            background:
                'linear-gradient(0deg, rgba(255, 255, 255, 1) 0%, rgba(237, 237, 237, 1) 47%, rgba(237, 237, 237, 1) 59%, rgba(245, 147, 212, 0.05) 86%, rgba(9, 118, 223, 0.05) 98%)',
        },
        to: async (next) => {
            while (1) {
                await next({
                    background:
                        'linear-gradient(0deg, rgba(245, 147, 212, 0.1) 0%, rgba(245, 147, 212, 0.2) 30%, rgba(245, 147, 212, 0.3) 40%, rgba(245, 147, 212, 0.4) 70%, rgba(245, 147, 212, 0.45) 100%)',
                });
                await next({
                    background:
                        'linear-gradient(0deg, rgba(255, 255, 255, 1) 0%, rgba(237, 237, 237, 1) 47%, rgba(237, 237, 237, 1) 59%, rgba(245, 147, 212, 0.05) 86%, rgba(9, 118, 223, 0.05) 100%)',
                });
            }
        },
        config: {
            duration: 6000,
        },
    });

    return (
        <>
            <Head>
                <title>Olei Web / Log In</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/circle-solid.svg" />
            </Head>

            <animated.div
                className="gradient-background"
                style={{
                    position: 'fixed',
                    top: 0,
                    left: 0,
                    width: '100%',
                    height: '100%',
                    zIndex: -1,
                    ...gradientProps,
                }}
            />

            <div className={`${styles.login} gradient-background display-flex column`}>
                <div className={styles.header}>
                    <h1>Olei</h1>
                </div>
                <div className={`${styles.content} display-flex allCenter`}>
                    <div className={`${styles.form} display-flex column justify`}>

                        <div className={`${styles.iconLogin} mb-small display-flex allCenter`}>
                            <FontAwesomeIcon icon={faArrowRightToBracket} className={`icon`} />
                        </div>

                        <h1>Bienvenido!</h1>
                        <p className='mb-medium'>Por favor, inicia sesi칩n abajo.</p>
                        <form onSubmit={handleSubmit(onLoginUser)} noValidate className="animation display-flex column">
                            <input
                                {...register("email", {
                                    required: {
                                        value: true,
                                        message: `Es obligatorio`
                                    }
                                })}
                                type="text"
                                className='input mb-small'
                                placeholder='Escribe tu e-mail...'
                            />
                            {errors.email && <span className='warning'>La cuenta es requerida</span>}

                            <input
                                {...register("password", {
                                    required: {
                                        value: true,
                                        message: `Es obligatorio`
                                    }
                                })}
                                type="password"
                                className='input mb-small'
                                placeholder='Escribe la contrase침a...'
                            />
                            {errors.password && <span className='warning'>La contrase침a es requerida</span>}
                            <button disabled={loggingIn} className='button' type="submit">{loggingIn ? "Cargando..." : "Iniciar sesi칩n"}</button>
                        </form>
                        <div className={styles.blur}></div>

                    </div>
                </div>
            </div>
            <Toaster
                position="bottom-center"
                reverseOrder={false}
            />
        </>
    );
};

export default Login;
